version: "3.8"

x-restart-policy: &default_restart_policy
  restart: ${DEFAULT_RESTART_POLICY:-unless-stopped}

services:
  proxy:
    image: traefik:2.10
    <<: *default_restart_policy
    hostname: "traefik"
    profiles:
      - full
      - rollout1
    command:
      # Let's Encrypt
      - '--certificatesresolvers.letsencrypt.acme.email=${ROOT_EMAIL:?error}'
      - '--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.letsencrypt.acme.httpchallenge=true'
      - '--certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json'
      # Global Certificate Resolver
      - '--entrypoints.websecure.http.tls.certresolver=${PROXY_DEFAULT_CERTIFICATE_RESOLVER:-}'
    labels:
      - traefik.enable=true
      - traefik.docker.network=hubnet

      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_ADDRESS:?error}`)
      - traefik.http.routers.traefik.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.traefik.service=api@internal
    networks:
      hubnet:
        aliases:
          - ${FRONTEND_ADDRESS}
          - ${DOCS_ADDRESS}
          - ${MINIO_ADDRESS}
          - ${MINIO_API_ADDRESS}
          - ${KEYCLOAK_ADDRESS}
          - ${API_ADDRESS}
          - ${EDC_ADDRESS}
    ports:
      - 80:80
      - 443:443
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./proxy/proxy-config.yml:/etc/traefik/traefik.yml:ro
    - proxy-certs:/certs

  mongo:
    build:
      context: ./mongo
    <<: *default_restart_policy
    profiles:
      - full
      - rollout1
    env_file:
      - mongo/mongo.env
    hostname: "mongo"
    networks:
      - hubintranet
      - hubnet
    ports:
      - 127.0.0.1:27017:27017
    volumes:
      - mongo-data:/data/db

  keycloak:
    build:
      context: ./keycloak
    <<: *default_restart_policy
    command: start-dev --import-realm
    profiles:
      - full
      - rollout1
    depends_on:
      keycloak-db:
        condition: service_healthy
    env_file:
      - keycloak/keycloak.env
    hostname: "keycloak"
    labels:
      - traefik.enable=true
      - traefik.docker.network=hubnet

      - traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_ADDRESS:?error}`)
      - traefik.http.routers.keycloak.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.keycloak.service=keycloak
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    networks:
      - keycloaknet
      - hubintranet
      - hubnet

  keycloak-config:
      build:
        context: ./keycloak
      depends_on:
        keycloak:
          condition: service_healthy
      entrypoint: [
        "sh",
        "-c",
        "chmod +x /keycloak-config.sh && /keycloak-config.sh"
      ]
      profiles:
        - full
        - rollout1
      env_file:
        - keycloak/keycloak.env
      networks:
        - hubintranet
      user: root
      volumes:
        - ./keycloak/keycloak-config.sh:/keycloak-config.sh

  keycloak-db:
    build:
      context: ./keycloak-db
    <<: *default_restart_policy
    profiles:
      - full
      - rollout1
    env_file:
      - keycloak-db/postgres.env
    hostname: "keycloak-db"
    networks:
      - keycloaknet
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data

  minio:
    build:
      context: ./minio
      args:
        - MINIO_VER=RELEASE.2023-05-27T05-56-19Z
    <<: *default_restart_policy
    profiles:
      - full
    command: server /data --address ":9000" --console-address ":9090"
    depends_on:
      keycloak-config:
        condition: service_completed_successfully
    env_file:
      - minio/minio.env
    labels:
      - traefik.enable=true
      - traefik.docker.network=hubnet

      - traefik.http.routers.minio.rule=Host(`${MINIO_ADDRESS:?error}`)
      - traefik.http.routers.minio.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.minio.service=minio
      - traefik.http.services.minio.loadbalancer.server.port=9090

      - traefik.http.routers.minio_api.rule=Host(`${MINIO_API_ADDRESS:?error}`)
      - traefik.http.routers.minio_api.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.minio_api.service=minio_api
      - traefik.http.services.minio_api.loadbalancer.server.port=9000
    hostname: "minio"
    networks:
      hubintranet:
      hubnet:
    volumes:
      - minio-data:/data

  minio-config:
      image: minio/mc
      depends_on:
        minio:
          condition: service_healthy
      entrypoint: ["sh","-c","chmod +x /minio-config.sh && ./minio-config.sh"]
      profiles:
        - full
      environment:
          - S3_ROOT_USER=${S3_ROOT_USER:?error}
          - S3_ROOT_PASSWORD=${S3_ROOT_PASSWORD:?error}
      networks:
        - hubintranet
      volumes:
        - ./minio/minio-config.sh:/minio-config.sh

  edc:
      build:
        context: ./edc
      <<: *default_restart_policy
      depends_on:
        minio:
          condition: service_healthy
        edc-db:
          condition: service_healthy
        minio-config:
          condition: service_completed_successfully
      profiles:
        - full
      env_file:
        - edc/edc.env
      hostname: "edc"
      labels:
        - traefik.enable=true
        - traefik.docker.network=hubnet

        - traefik.http.routers.edc_api.rule=Host(`${EDC_ADDRESS:?error}`) && PathPrefix(`/api`)
        - traefik.http.routers.edc_api.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
        - traefik.http.routers.edc_api.service=edc_api
        - traefik.http.services.edc_api.loadbalancer.server.port=8181

        - traefik.http.routers.edc_management.rule=Host(`${EDC_ADDRESS:?error}`) && PathPrefix(`/management`)
        - traefik.http.routers.edc_management.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
        - traefik.http.routers.edc_management.service=edc_management
        - traefik.http.services.edc_management.loadbalancer.server.port=8182

        - traefik.http.routers.edc_protocol.rule=Host(`${EDC_ADDRESS:?error}`) && PathPrefix(`/protocol`)
        - traefik.http.routers.edc_protocol.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
        - traefik.http.routers.edc_protocol.service=edc_protocol
        - traefik.http.services.edc_protocol.loadbalancer.server.port=8282

        - traefik.http.routers.edc_control.rule=Host(`${EDC_ADDRESS:?error}`) && PathPrefix(`/control`)
        - traefik.http.routers.edc_control.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
        - traefik.http.routers.edc_control.service=edc_control
        - traefik.http.services.edc_control.loadbalancer.server.port=8183

        - traefik.http.routers.edc_public.rule=Host(`${EDC_ADDRESS:?error}`) && PathPrefix(`/public`)
        - traefik.http.routers.edc_public.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
        - traefik.http.routers.edc_public.service=edc_public
        - traefik.http.services.edc_public.loadbalancer.server.port=8185

        - traefik.http.routers.edc_identity.rule=Host(`${EDC_ADDRESS:?error}`) && PathPrefix(`/identity`)
        - traefik.http.routers.edc_identity.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
        - traefik.http.routers.edc_identity.service=edc_identity
        - traefik.http.services.edc_identity.loadbalancer.server.port=8186
      networks:
        - hubnet
      volumes:
          - ./edc/resources:/resources

  edc-db:
      build:
          context: ./edc-db
      profiles:
        - full
      env_file:
          - edc-db/edc-db.env
      hostname: "edc-db"
      networks:
          - hubnet
      volumes:
          - edc-db-data:/var/lib/postgresql/data
          - ./edc-db/sql_tables:/docker-entrypoint-initdb.d/

  api:
    build:
      context: ./api
    <<: *default_restart_policy
    # DEVELOPMENT: run with reload and mount api package code
    command: uvicorn --reload api.main:app
    profiles:
      - full
      - rollout1
    depends_on:
      mongo:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      nautilus:
        condition: service_healthy
      keycloak-config:
        condition: service_completed_successfully
    env_file:
      - api/api.env
    hostname: "api"
    labels:
      - traefik.enable=true
      - traefik.docker.network=hubnet

      - traefik.http.routers.api.rule=Host(`${API_ADDRESS:?error}`)
      - traefik.http.routers.api.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.api.service=api
      - traefik.http.services.api.loadbalancer.server.port=8000
    networks:
      - hubintranet
      - hubnet
      - frontend-backend
    ports:
      - 127.0.0.1:8000:8000 # For pytest
    volumes:
      - ./api/api/:/home/api/api/

  frontend:
    build:
      context: ./frontend
      args:
        - API_ADDRESS=${API_ADDRESS:?error}
        - FRONTEND_ADDRESS=${FRONTEND_ADDRESS:?error}
        - KEYCLOAK_ADDRESS=${KEYCLOAK_ADDRESS:?error}
        - KEYCLOAK_FRONTEND_CLIENT=${KEYCLOAK_FRONTEND_CLIENT:?error}
        - KEYCLOAK_REALM=${KEYCLOAK_REALM:?error}
        - FRONTEND_LOG_LEVEL=${FRONTEND_LOG_LEVEL:?error}
        - FRONTEND_REDIRECT_URI_MOBILE=${FRONTEND_REDIRECT_URI_MOBILE:?error}
        - PROXY_DEFAULT_SCHEME=${PROXY_DEFAULT_SCHEME:?error}
    <<: *default_restart_policy
    profiles:
      - full
    depends_on:
      api:
        condition: service_healthy
    hostname: "frontend"
    labels:
      - traefik.enable=true
      - traefik.docker.network=hubnet

      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_ADDRESS:?error}`)
      - traefik.http.routers.frontend.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.frontend.service=frontend
      - traefik.http.services.frontend.loadbalancer.server.port=80
    networks:
      - frontend-backend
      - hubnet

  docs:
    build:
      context: ./docs
      args:
        - BUILD_WITH_PDF=${DOCS_BUILD_WITH_PDF:-1}
    <<: *default_restart_policy
    profiles:
      - full
    labels:
      - traefik.enable=true
      - traefik.docker.network=hubnet

      - traefik.http.routers.docs.rule=Host(`${DOCS_ADDRESS:?error}`)
      - traefik.http.routers.docs.entrypoints=${PROXY_DEFAULT_ENTRYPOINTS:?error}
      - traefik.http.routers.docs.service=docs
      - traefik.http.services.docs.loadbalancer.server.port=80
    networks:
      - hubnet

  # broker for communication between api and diagnostics
  redis:
    image: redis:alpine
    <<: *default_restart_policy
    profiles:
      - full
    hostname: "redis"
    networks:
      - hubintranet
    command: redis-server --requirepass ${REDIS_PASSWORD:?error}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 2s
      retries: 5

  # background service that integrates the dfki state machine
  diagnostics:
    build:
      context: ./diagnostics
    <<: *default_restart_policy
    command: celery -A diagnostics.tasks worker --loglevel=INFO
    profiles:
      - full
    env_file:
      - diagnostics/diagnostics.env
    hostname: "diagnostics"
    networks:
      - hubintranet
    volumes:
      - ./diagnostics/diagnostics:/home/runtime/diagnostics
      - ./diagnostics/models:/home/runtime/models

  # utilized by the diagnostics service
  knowledge-graph:
    build:
      context: ./knowledge-graph
    <<: *default_restart_policy
    profiles:
      - full
      - rollout1
    ports:
      - 3030:3030
    hostname: "knowledge-graph"
    networks:
      - hubintranet
      - hubnet

  nautilus:
    build:
      context: ./nautilus
    profiles:
      - full
    env_file: ./nautilus/nautilus.env
    hostname: "nautilus"
    ports:
      - 127.0.0.1:3000:3000 # Only for testing
    networks:
      hubintranet:
      hubnet:

networks:
  hubnet:
    name: hubnet
  hubintranet:
    internal: true
  keycloaknet:
    internal: true
  frontend-backend:

volumes:
  mongo-data:
  keycloak-db-data:
  minio-data:
  edc-db-data:
  proxy-certs:
