name: Test Docker Stack

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  docker:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    env:
      SCHEME: http://
      BASE_ADDRESS: werkstatthub.docker.localhost
      FRONTEND_ADDRESS: ${SCHEME}${BASE_ADDRESS}
      DOCS_ADDRESS: ${SCHEME}docs.${BASE_ADDRESS}
      MINIO_ADDRESS: ${SCHEME}minio.${BASE_ADDRESS}
      KEYCLOAK_ADDRESS: ${SCHEME}keycloak.${BASE_ADDRESS}
      API_ADDRESS: ${SCHEME}api.${BASE_ADDRESS}
      EDC_ADDRESS: ${SCHEME}edc.${BASE_ADDRESS}

    steps:
    # Setup environment
      - name: Checkout
        uses: actions/checkout@v1

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

    # Tag Containers
      - name: Build and tag containers
        run: docker compose --env-file=dev.env build

    # Start Containers
      - name: Start containers and wait for healthy state
        run: docker compose --env-file=dev.env up -d --wait

    # Test documentation
      - name: Check if documentation is reachable
        run: |
          curl -fs -o /dev/null -w 'http_code:%{http_code}' \
          ${DOCS_ADDRESS} \
          || exit 1

    # Test MongoDB
      - name: Check if MongoDB is reachable
        run: |
          curl -fs -o /dev/null -w 'http_code:%{http_code}' \
          http://localhost:27017 \
          || exit 1

    # Test Keycloak
      - name: Check if Keycloak is healthy
        run: |
          curl -fs \
          ${KEYLOAK_ADDRESS}/health/live \
          || exit 1

    # Test MinIO
      - name: Check if MinIO is healthy
        run: |
          curl -fs \
          ${MINIO_ADDRESS}/minio/health/live \
          || exit 1

    # Test EDC
      - name: Check if EDC is healthy
        run: |
            curl -fs \
            ${EDC_ADDRESS}/api/health \
            || exit 1

    # Test API
      - name: Check if API is healthy
        run: |
          curl -fs \
          ${API_ADDRESS}/v1/health/ping \
          || exit 1

      - name: Check for strict-transport-security header
        run: |
          curl -sIX GET ${API_ADDRESS}/v1/health/ping \
            | grep -iq "strict-transport-security" \
            || exit 1

      - name: Install python dependencies
        run: pip install -r requirements.txt

      - name: Run pytest
        run: pytest ./api

      - name: Run flake8
        run: flake8 ./api

    # Test Frontend
      - name: Check if Frontend is reachable
        run: |
          curl -fs \
          ${FRONTEND_ADDRESS} \
          || exit 1

    # Clean up
      - name: Stop containers
        if: always()
        run: docker compose --env-file=dev.env down -v
